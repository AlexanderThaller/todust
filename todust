#!/usr/bin/env bash

################################################################################
### Runtime Options                                                          ###
################################################################################

set -o errexit   # Stop on command failures.
set -o nounset   # Stop when there are undefined variables.
set -o pipefail  # Stop when a command in a pipe failes.
set -o noclobber # Dont overwrite existing files with '>'.


################################################################################
### Options                                                                  ###
################################################################################

PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/games:/usr/local/sbin:/usr/local/bin:/root/bin"
readonly TrapSignalFile="/tmp/get_snapshot-trap_signal"
readonly FailFile="/tmp/get_snapshot-fail_file"
readonly DataDir="${HOME}/.local/share/todust"


################################################################################
### Functions                                                                ###
################################################################################

todust-main() {
  local command="${1:-""}"
  local project="${2:-""}"

  check_empty_variable_exit "${command}" "command"
  check_empty_variable_exit "${project}" "project"

  debug "command: ${command}"
  debug "project: ${project}"

  case "${command}" in
    "add")
      todoust-run_add "${DataDir}" "${project}"
      ;;

    *)
      error "unkown command ${command}"
      exit 1
      ;;
  esac
}

todoust-run_add() {
  local datadir="${1:-""}"
  local project="${2:-""}"

  check_empty_variable_exit "${datadir}" "datadir"
  check_empty_variable_exit "${project}" "project"

  local project_path=""
  project_path="$(todoust-project_to_path "${datadir}" "${project}")"

  local project_dir=""
  project_dir="$(dirname "${project_path}")"

  debug "project_dir: ${project_dir}"

  mkdir -p "${project_dir}"

  local note_tmp_file=""
  note_tmp_file="$(mktemp -u --suffix="todoust.asciidoc")"

  ${FCEDIT:-${VISUAL:-${EDITOR:-vi}}} "${note_tmp_file}"

  cat "${note_tmp_file}"

  rm "${note_tmp_file}"
}

todoust-project_to_path() {
  local datadir="${1:-""}"
  local project="${2:-""}"

  check_empty_variable_exit "${datadir}" "datadir"
  check_empty_variable_exit "${project}" "project"

  debug "datadir: ${datadir}"
  debug "project: ${project}"

  local project_path=""
  project_path="$(echo "${project}" | tr '.' '/').csv"

  local fullpath="${datadir}/${project_path}"

  debug "fullpath: ${fullpath}"

  echo "${fullpath}"
}


################################################################################
### Helper Functions                                                         ###
################################################################################

log() {
  local message="${1:-}"
  local level="${2:-"info"}"

  if [[ -z "${message}" ]]; then
    level="error"
    message="message for log can not be empty"
  fi

  # Only print colors when we are in a terminal
  if [ -t 1 ]; then
    case "${level}" in
      "error")
        level="$(tput setaf 1)${level}$(tput sgr0)"
      ;;

      "warn")
        level="$(tput setaf 3)${level}$(tput sgr0)"
      ;;

      "info")
        level="$(tput setaf 4)${level}$(tput sgr0)"
      ;;

      *)
      ;;
    esac
  fi

  local timestamp
  timestamp="$(date -u +%FT%H:%M:%S%z)"

  local hostname
  hostname="$(hostname)"

  if [[ "${level}" == "debug" ]]; then
    echo -e "${level}[${timestamp}, ${hostname}] ${message}" > /dev/null
  else
    echo -e "${level}[${timestamp}, ${hostname}] ${message}" >&2
  fi
}

debug() {
  local message="${1:-}"
  log "${message}" "debug"
}

info() {
  local message="${1:-}"
  log "${message}" "info"
}

warn() {
  local message="${1:-}"
  log "${message}" "warn"
}

error() {
  local message="${1:-}"
  log "${message}" "error"
}

check_empty_variable_exit() {
  local variable="${1:-}"
  local variable_name="${2:-}"

  check_empty_exit "${variable}" "${variable_name} can not be empty"
}

check_empty_exit() {
  local variable="${1:-}"
  local message="${2:-}"

  if [[ -z "${message}" ]]; then
    error "message can not be empty"

    exit 1
  fi

  if [[ -z "${variable}" ]]; then
    if [[ ! -z "${message}" ]]; then
      error "${message}"
    fi

    exit 1
  fi
}

ask_and_check_yes_no() {
  local message="${1:-""}"

  check_empty_variable_exit "${message}" "message"

  echo
  local input="N"
  read -r -p "${message}? (y/N)" input

  local lowerinput
  lowerinput="$(echo "${input}" | tr '[:upper:]' '[:lower:]')"
  case "${lowerinput}" in
    "y"|"yes")
      return 0
    ;;

    *)
      exit 1
    ;;
  esac
}

trap_signal_exit() {
  if [[ ! -e "${TrapSignalFile}" ]]; then
    error "Execution failed"
  else
    rm -f "${FailFile}"
  fi

  rm -f "${TrapSignalFile}"
  debug "Finished"
}



################################################################################
### Entry Point                                                              ###
################################################################################

# Make xtrace more usefull
# see http://wiki.bash-hackers.org/scripting/debuggingtips
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
# Set trap which will be run when the execution failes
trap 'trap_signal_exit' EXIT

debug "Starting"
todust-main "$@"

touch "${TrapSignalFile}"
